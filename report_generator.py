from datetime import datetime
import os
import time
import logging
from typing import Dict

class ReportGenerator:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    def generate_and_save(self, research_data: str, user_input: Dict[str, str]) -> str:
        """Generate and save the health information report"""
        report_content = self._format_report(research_data, user_input)
        return self._save_report(report_content)
    
    def _format_report(self, research_data: str, user_input: Dict[str, str]) -> str:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        return f"""
HEALTH INFORMATION REPORT
Generated: {timestamp}

IMPORTANT DISCLAIMER
-------------------
This report provides general health information only and is not a substitute for 
professional medical advice, diagnosis, or treatment. Always seek the advice of 
your physician or other qualified health provider with any questions you may 
have regarding a medical condition.

USER QUERY
----------
Symptoms/Goals: {user_input['symptoms']}
Additional Information: {user_input['additional_info']}

HEALTH INFORMATION SUMMARY
-------------------------
{research_data}

GENERAL RECOMMENDATIONS
----------------------
1. Monitor your symptoms and keep a health diary
2. Maintain a healthy lifestyle (balanced diet, regular exercise, adequate sleep)
3. Stay hydrated and manage stress levels
4. Consider scheduling a check-up with your healthcare provider

WHEN TO SEEK IMMEDIATE MEDICAL ATTENTION
--------------------------------------
- If symptoms are severe or worsen significantly
- If you experience any emergency warning signs
- If you have underlying health conditions that may be affected
- When in doubt about your health condition

-------------------
Report generated by AI Health Information Assistant
For informational purposes only
"""
    
    def _save_report(self, content: str, filename: str = None) -> str:
        if filename is None:
            filename = f"health_info_{int(time.time())}.txt"
        
        try:
            os.makedirs('health_reports', exist_ok=True)
            filepath = os.path.join('health_reports', filename)
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            return filepath
        except Exception as e:
            self.logger.error(f"Error saving report: {str(e)}")
            raise

